pipeline {
    agent any

    parameters {
        booleanParam(name: "CREATE_INFRA", defaultValue: true)
    }

    stages {
        stage('Build') {
            parallel {
                stage('Build Employees') {
                    steps {
                        script {
                            dir('source/employees') {
                                sh './gradlew clean build jar'
                            }
                        }
                    }
                }

                stage('Build Payroll') {
                    steps {
                        script {
                            dir('source/payroll') {
                                sh './gradlew clean build jar'
                            }
                        }
                    }
                }
            }
        }

        stage('Test') {
            parallel {
                stage('Test Employees') {
                    steps {
                        script {
                            dir('source/employees') {
                                sh './gradlew test'
                            }
                        }
                    }
                }

                stage('Test Payroll') {
                    steps {
                        script {
                            dir('source/payroll') {
                                sh './gradlew test'
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy Containers') {
            parallel {
                stage('Deploy Employees') {
                    steps {
                        script {
                            dir('source/employees') {
                                withCredentials([
                                    string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                                    string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                                    string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET') ]) {

                                    env.ACR_NAME = "devwatsoncr"
                                    sh 'docker build . -t "$ACR_NAME.azurecr.io/employees"'

                                    sh 'az login --service-principal -u "$ARM_CLIENT_ID" --tenant "$ARM_TENANT_ID" -p "$ARM_CLIENT_SECRET"'
                                    env.TOKEN = sh( script: 'az acr login --name "$ACR_NAME" --expose-token --output tsv --query accessToken', returnStdout: true).trim()
                                    sh 'az logout'
                                    sh 'docker login myregistry.azurecr.io --username "00000000-0000-0000-0000-000000000000" --password "$TOKEN"'
                                    sh 'unset TOKEN'

                                    sh 'docker push $ACR_NAME.azurecr.io/employees'
                                }
                            }
                        }
                    }
                }

                stage('Deploy Payroll') {
                    steps {
                        script {
                            dir('source/payroll') {
                                sh 'echo TODO'
                            }
                        }
                    }
                }
            }
        }

        stage('Create Infra') {
            when {
                environment name: "CREATE_INFRA", value: "true"
            }

            steps {
                input 'Start?'
                build job: 'infra'
            }
        }

        stage('Deploy') {
            steps {
                input 'Start?'
                script {
                    sh 'mkdir -p /var/lib/jenkins/.ssh'
                    sh 'touch /var/lib/jenkins/.ssh/known_hosts'
                    sh 'ssh-keyscan -H dev-watson-app-vm >> /var/lib/jenkins/.ssh/known_hosts'
                    sh 'ansible-playbook cicd/playbooks/playbook.yml -i cicd/playbooks/inventory.ini -e "ansible_ssh_password=P4ssword"'
                }
            }
        }
    }
}
