pipeline {
    agent any

    parameters {
        booleanParam(name: "TEAR_DOWN", defaultValue: false)
    }

    environment {
        ACR_NAME = "devwatsonappsvcmaincr"
        TF_CLI_ARGS = "-no-color"
        TF_CLI_ARGS_apply = "-auto-approve"
        TF_CLI_ARGS_destroy = "-auto-approve"
    }

    stages {
        stage('Build') {

            when {
                environment name: "TEAR_DOWN", value: "false"
            }

            parallel {
                stage('Build Employees') {
                    steps {
                        script {
                            dir('source/employees') {
                                sh './gradlew clean build jar'
                            }
                        }
                    }
                }

                stage('Build Payroll') {
                    steps {
                        script {
                            dir('source/payroll') {
                                sh './gradlew clean build jar'
                            }
                        }
                    }
                }
            }
        }

        stage('Test') {

            when {
                environment name: "TEAR_DOWN", value: "false"
            }

            parallel {
                stage('Test Employees') {
                    steps {
                        script {
                            dir('source/employees') {
                                sh './gradlew test'
                            }
                        }
                    }
                }

                stage('Test Payroll') {
                    steps {
                        script {
                            dir('source/payroll') {
                                sh './gradlew test'
                            }
                        }
                    }
                }
            }
        }

        stage('Container registry Login') {

            when {
                environment name: "TEAR_DOWN", value: "false"
            }

            steps {
                script {
                    withCredentials([
                        string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                        string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID'),
                        string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET')
                    ]) {
                        sh 'docker login "$ACR_NAME.azurecr.io" --username "$ARM_CLIENT_ID" --password "$ARM_CLIENT_SECRET"'
                    }
                }
            }
        }

        stage('Deploy Containers') {

            when {
                environment name: "TEAR_DOWN", value: "false"
            }

            parallel {
                stage('Deploy Employees') {

                    environment {
                        IMAGE_TAG = "${ACR_NAME}.azurecr.io/employees"
                    }

                    steps {
                        script {
                            dir('source/employees') {
                                sh 'docker build . -t "$IMAGE_TAG"'
                                sh 'docker push "$IMAGE_TAG"'
                            }
                        }
                    }
                }

                stage('Deploy Payroll') {

                    environment {
                        IMAGE_TAG = "${ACR_NAME}.azurecr.io/payroll"
                    }

                    steps {
                        script {
                            dir('source/payroll') {
                                sh 'docker build . -t "$IMAGE_TAG"'
                                sh 'docker push "$IMAGE_TAG"'
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy') {

            when {
                environment name: "TEAR_DOWN", value: "false"
            }

            steps {
                script {
                    dir('infra/app') {
                        withCredentials([
                            string(credentialsId: 'TF_VAR_subscription_id', variable: 'TF_VAR_subscription_id'),
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID') ]) {
                                sh 'make'
                                sh 'make apply'
                        }
                    }
                }
            }
        }

        stage('Tear Down') {

            when {
                environment name: "TEAR_DOWN", value: "true"
            }

            steps {
                script {
                    dir('infra/app') {
                        withCredentials([
                            string(credentialsId: 'TF_VAR_subscription_id', variable: 'TF_VAR_subscription_id'),
                            string(credentialsId: 'ARM_CLIENT_ID', variable: 'ARM_CLIENT_ID'),
                            string(credentialsId: 'ARM_CLIENT_SECRET', variable: 'ARM_CLIENT_SECRET'),
                            string(credentialsId: 'ARM_SUBSCRIPTION_ID', variable: 'ARM_SUBSCRIPTION_ID'),
                            string(credentialsId: 'ARM_TENANT_ID', variable: 'ARM_TENANT_ID') ]) {
                                sh 'make'
                                sh 'make destroy'
                        }
                    }
                }
            }
        }
    }
}
